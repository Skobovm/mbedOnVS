//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LlilumApplication {
	
	
	internal partial class LlilumDebugger {
		
		/// <summary>Backing field for deserialized rule.<see cref='Microsoft.Build.Framework.XamlTypes.Rule'/>.</summary>
		private static Microsoft.Build.Framework.XamlTypes.Rule deserializedFallbackRule;
		
		/// <summary>The name of the schema to look for at runtime to fulfill property access.</summary>
		internal const string SchemaName = "LlilumDebugger";
		
		/// <summary>The ItemType given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
		internal const string PrimaryDataSourceItemType = null;
		
		/// <summary>The Label given in the Rule.DataSource property.  May not apply to every Property's individual DataSource.</summary>
		internal const string PrimaryDataSourceLabel = "";
		
		/// <summary>The debug command to execute. (The "LlilumDebuggerCommand" property).</summary>
		internal const string LlilumDebuggerCommandProperty = "LlilumDebuggerCommand";
		
		/// <summary>The command line arguments to pass to the application. (The "LlilumDebuggerCommandArguments" property).</summary>
		internal const string LlilumDebuggerCommandArgumentsProperty = "LlilumDebuggerCommandArguments";
		
		/// <summary>Base directory of the solution. (The "LlilumDebuggerSolutionDirectory" property).</summary>
		internal const string LlilumDebuggerSolutionDirectoryProperty = "LlilumDebuggerSolutionDirectory";
		
		/// <summary>Name of the Llilum output binary. (The "LlilumDebuggerOutputName" property).</summary>
		internal const string LlilumDebuggerOutputNameProperty = "LlilumDebuggerOutputName";
		
		/// <summary>Llilum SDK Path (The "LlilumSDKPath" property).</summary>
		internal const string LlilumSDKPathProperty = "LlilumSDKPath";
		
		/// <summary>Llilum Output Bin (The "LlilumOutputBin" property).</summary>
		internal const string LlilumOutputBinProperty = "LlilumOutputBin";
		
		/// <summary>The application's working directory. By default, the directory containing the project file. (The "LlilumDebuggerWorkingDirectory" property).</summary>
		internal const string LlilumDebuggerWorkingDirectoryProperty = "LlilumDebuggerWorkingDirectory";
		
		/// <summary>Specifies whether the debugger should attempt to attach to an existing process when debugging starts. (The "LlilumDebuggerDebuggerAttach" property).</summary>
		internal const string LlilumDebuggerDebuggerAttachProperty = "LlilumDebuggerDebuggerAttach";
		
		/// <summary>Llilum Py Ocd (The "LlilumPyOcdPath" property).</summary>
		internal const string LlilumPyOcdPathProperty = "LlilumPyOcdPath";
		
		/// <summary>Llilum Py Ocd Args (The "LlilumPyOcdArgs" property).</summary>
		internal const string LlilumPyOcdArgsProperty = "LlilumPyOcdArgs";
		
		/// <summary>Llilum Py Ocd (The "LlilumOpenOcdPath" property).</summary>
		internal const string LlilumOpenOcdPathProperty = "LlilumOpenOcdPath";
		
		/// <summary>Llilum Py Ocd Args (The "LlilumOpenOcdArgs" property).</summary>
		internal const string LlilumOpenOcdArgsProperty = "LlilumOpenOcdArgs";
		
		/// <summary>Llilum Flash Tool (The "LlilumFlashToolPath" property).</summary>
		internal const string LlilumFlashToolPathProperty = "LlilumFlashToolPath";
		
		/// <summary>Llilum Flash Tool Args (The "LlilumFlashToolArgs" property).</summary>
		internal const string LlilumFlashToolArgsProperty = "LlilumFlashToolArgs";
		
		/// <summary>ST-Link Utility Path (The "LlilumSTLinkUtilityPath" property).</summary>
		internal const string LlilumSTLinkUtilityPathProperty = "LlilumSTLinkUtilityPath";
		
		/// <summary>ST-Link Utility Args for connecting to a board (The "LlilumSTLinkUtilityConnectArgs" property).</summary>
		internal const string LlilumSTLinkUtilityConnectArgsProperty = "LlilumSTLinkUtilityConnectArgs";
		
		/// <summary>ST-Link Utility Args for erasing a chip (The "LlilumSTLinkUtilityEraseArgs" property).</summary>
		internal const string LlilumSTLinkUtilityEraseArgsProperty = "LlilumSTLinkUtilityEraseArgs";
		
		/// <summary>ST-Link Utility Args for programming a chip (The "LlilumSTLinkUtilityProgramArgs" property).</summary>
		internal const string LlilumSTLinkUtilityProgramArgsProperty = "LlilumSTLinkUtilityProgramArgs";
		
		/// <summary>Llilum GDB Path (The "LlilumGdbPath" property).</summary>
		internal const string LlilumGdbPathProperty = "LlilumGdbPath";
		
		/// <summary>Llilum GDB Args (The "LlilumGdbArgs" property).</summary>
		internal const string LlilumGdbArgsProperty = "LlilumGdbArgs";
		
		/// <summary>Drive To Copy Binary To (The "LlilumDriveToCopyTo" property).</summary>
		internal const string LlilumDriveToCopyToProperty = "LlilumDriveToCopyTo";
		
		/// <summary>Which GDB server should be used for debugging (The "LlilumGdbServerOption" property).</summary>
		internal const string LlilumGdbServerOptionProperty = "LlilumGdbServerOption";
		
		/// <summary>Which tool should be used for deploying (The "LlilumDeployTool" property).</summary>
		internal const string LlilumDeployToolProperty = "LlilumDeployTool";
		
		/// <summary>Backing field for the <see cref='Microsoft.Build.Framework.XamlTypes.Rule'/> property.</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule;
		
		/// <summary>Backing field for the file name of the rule property.</summary>
		private string file;
		
		/// <summary>Backing field for the ItemType property.</summary>
		private string itemType;
		
		/// <summary>Backing field for the ItemName property.</summary>
		private string itemName;
		
		/// <summary>Configured Project</summary>
		private Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject;
		
		/// <summary>The dictionary of named catalogs.</summary>
		private System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs;
		
		/// <summary>Backing field for the <see cref='Microsoft.VisualStudio.ProjectSystem.Properties.IRule'/> property.</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule fallbackRule;
		
		/// <summary>Thread locking object</summary>
		private object locker = new object();
		
		/// <summary>Initializes a new instance of the LlilumDebugger class.</summary>
		internal LlilumDebugger(Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule) {
			this.rule = rule;
		}
		
		/// <summary>Initializes a new instance of the LlilumDebugger class.</summary>
		internal LlilumDebugger(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs, string context, string file, string itemType, string itemName) : 
				this(GetRule(System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault(catalogs, context), file, itemType, itemName)) {
			if ((configuredProject == null)) {
				throw new System.ArgumentNullException("configuredProject");
			}
			this.configuredProject = configuredProject;
			this.catalogs = catalogs;
			this.file = file;
			this.itemType = itemType;
			this.itemName = itemName;
		}
		
		/// <summary>Initializes a new instance of the LlilumDebugger class.</summary>
		internal LlilumDebugger(Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule, Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject) : 
				this(rule) {
			if ((rule == null)) {
				throw new System.ArgumentNullException("rule");
			}
			if ((configuredProject == null)) {
				throw new System.ArgumentNullException("configuredProject");
			}
			this.configuredProject = configuredProject;
			this.rule = rule;
			this.file = this.rule.File;
			this.itemType = this.rule.ItemType;
			this.itemName = this.rule.ItemName;
		}
		
		/// <summary>Initializes a new instance of the LlilumDebugger class.</summary>
		internal LlilumDebugger(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs, string context, Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext propertyContext) : 
				this(configuredProject, catalogs, context, GetContextFile(propertyContext), propertyContext.ItemType, propertyContext.ItemName) {
		}
		
		/// <summary>Initializes a new instance of the LlilumDebugger class that assumes a project context (neither property sheet nor items).</summary>
		internal LlilumDebugger(Microsoft.VisualStudio.ProjectSystem.ConfiguredProject configuredProject, System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog> catalogs) : 
				this(configuredProject, catalogs, "Project", null, null, null) {
		}
		
		/// <summary>Gets the IRule used to get and set properties.</summary>
		public Microsoft.VisualStudio.ProjectSystem.Properties.IRule Rule {
			get {
				return this.rule;
			}
		}
		
		/// <summary>The debug command to execute.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerCommand {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerCommandProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerCommandProperty)));
				}
				return property;
			}
		}
		
		/// <summary>The command line arguments to pass to the application.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerCommandArguments {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerCommandArgumentsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerCommandArgumentsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Base directory of the solution.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerSolutionDirectory {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerSolutionDirectoryProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerSolutionDirectoryProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Name of the Llilum output binary.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerOutputName {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerOutputNameProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerOutputNameProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum SDK Path</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumSDKPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSDKPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSDKPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Output Bin</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumOutputBin {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOutputBinProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOutputBinProperty)));
				}
				return property;
			}
		}
		
		/// <summary>The application&apos;s working directory. By default, the directory containing the project file.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerWorkingDirectory {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerWorkingDirectoryProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerWorkingDirectoryProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Specifies whether the debugger should attempt to attach to an existing process when debugging starts.</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDebuggerDebuggerAttach {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerDebuggerAttachProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDebuggerDebuggerAttachProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Py Ocd</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumPyOcdPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumPyOcdPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumPyOcdPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Py Ocd Args</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumPyOcdArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumPyOcdArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumPyOcdArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Py Ocd</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumOpenOcdPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOpenOcdPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOpenOcdPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Py Ocd Args</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumOpenOcdArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOpenOcdArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumOpenOcdArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Flash Tool</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumFlashToolPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumFlashToolPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumFlashToolPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum Flash Tool Args</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumFlashToolArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumFlashToolArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumFlashToolArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ST-Link Utility Path</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumSTLinkUtilityPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ST-Link Utility Args for connecting to a board</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumSTLinkUtilityConnectArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityConnectArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityConnectArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ST-Link Utility Args for erasing a chip</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumSTLinkUtilityEraseArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityEraseArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityEraseArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>ST-Link Utility Args for programming a chip</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumSTLinkUtilityProgramArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityProgramArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumSTLinkUtilityProgramArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum GDB Path</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumGdbPath {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbPathProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbPathProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Llilum GDB Args</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumGdbArgs {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbArgsProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbArgsProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Drive To Copy Binary To</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDriveToCopyTo {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDriveToCopyToProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDriveToCopyToProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Which GDB server should be used for debugging</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumGdbServerOption {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbServerOptionProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumGdbServerOptionProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Which tool should be used for deploying</summary>
		internal Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty LlilumDeployTool {
			get {
				Microsoft.VisualStudio.ProjectSystem.Properties.IRule localRule = this.rule;
				if ((localRule == null)) {
					localRule = this.GeneratedFallbackRule;
				}
				if ((localRule == null)) {
					return null;
				}
				Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDeployToolProperty)));
				if (((property == null) 
							&& (this.GeneratedFallbackRule != null))) {
					localRule = this.GeneratedFallbackRule;
					property = ((Microsoft.VisualStudio.ProjectSystem.Properties.IEvaluatedProperty)(localRule.GetProperty(LlilumDeployToolProperty)));
				}
				return property;
			}
		}
		
		/// <summary>Get the fallback rule if the current rule on disk is missing or a property in the rule on disk is missing</summary>
		private Microsoft.VisualStudio.ProjectSystem.Properties.IRule GeneratedFallbackRule {
			get {
				if (((this.fallbackRule == null) 
							&& (this.configuredProject != null))) {
					System.Threading.Monitor.Enter(this.locker);
					try {
						if ((this.fallbackRule == null)) {
							this.InitializeFallbackRule();
						}
					}
					finally {
						System.Threading.Monitor.Exit(this.locker);
					}
				}
				return this.fallbackRule;
			}
		}
		
		private static Microsoft.VisualStudio.ProjectSystem.Properties.IRule GetRule(Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog catalog, string file, string itemType, string itemName) {
			if ((catalog == null)) {
				return null;
			}
			return catalog.BindToContext(SchemaName, file, itemType, itemName);
		}
		
		private static string GetContextFile(Microsoft.VisualStudio.ProjectSystem.Properties.IProjectPropertiesContext propertiesContext) {
			if ((propertiesContext.IsProjectFile == true)) {
				return null;
			}
			else {
				return propertiesContext.File;
			}
		}
		
		private void InitializeFallbackRule() {
			if ((this.configuredProject == null)) {
				return;
			}
			Microsoft.Build.Framework.XamlTypes.Rule unboundRule = LlilumDebugger.deserializedFallbackRule;
			if ((unboundRule == null)) {
				System.IO.Stream xamlStream = null;
				System.Reflection.Assembly thisAssembly = System.Reflection.Assembly.GetExecutingAssembly();
				try {
					xamlStream = thisAssembly.GetManifestResourceStream("XamlRuleToCode:LlilumDebugger.xaml");
					Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode root = ((Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode)(System.Xaml.XamlServices.Load(xamlStream)));
					System.Collections.Generic.IEnumerator<System.Object> ruleEnumerator = root.GetSchemaObjects(typeof(Microsoft.Build.Framework.XamlTypes.Rule)).GetEnumerator();
					for (
					; ((unboundRule == null) 
								&& ruleEnumerator.MoveNext()); 
					) {
						Microsoft.Build.Framework.XamlTypes.Rule t = ((Microsoft.Build.Framework.XamlTypes.Rule)(ruleEnumerator.Current));
						if (System.StringComparer.OrdinalIgnoreCase.Equals(t.Name, SchemaName)) {
							unboundRule = t;
							unboundRule.Name = "16131f5e-94a5-4002-8f45-d4e6fb794206";
							LlilumDebugger.deserializedFallbackRule = unboundRule;
						}
					}
				}
				finally {
					if ((xamlStream != null)) {
						((System.IDisposable)(xamlStream)).Dispose();
					}
				}
			}
			this.configuredProject.Services.AdditionalRuleDefinitions.AddRuleDefinition(unboundRule, "FallbackRuleCodeGenerationContext");
			Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog catalog = this.configuredProject.Services.PropertyPagesCatalog.GetMemoryOnlyCatalog("FallbackRuleCodeGenerationContext");
			this.fallbackRule = catalog.BindToContext(unboundRule.Name, this.file, this.itemType, this.itemName);
		}
		
		/// <summary>Enum values for the LlilumGdbServerOption property.</summary>
		internal class LlilumGdbServerOptionValues {
			
			/// <summary>The  ("pyocd") value for the LlilumGdbServerOption property.</summary>
			internal const string pyocd = "pyocd";
			
			/// <summary>The  ("openocd") value for the LlilumGdbServerOption property.</summary>
			internal const string openocd = "openocd";
			
			/// <summary>Prevents automatic generation of a default constructor.</summary>
			private LlilumGdbServerOptionValues() {
			}
		}
		
		/// <summary>Enum values for the LlilumDeployTool property.</summary>
		internal class LlilumDeployToolValues {
			
			/// <summary>The  ("pyocdflashtool") value for the LlilumDeployTool property.</summary>
			internal const string pyocdflashtool = "pyocdflashtool";
			
			/// <summary>The  ("stlinkutility") value for the LlilumDeployTool property.</summary>
			internal const string stlinkutility = "stlinkutility";
			
			/// <summary>The  ("copytodrive") value for the LlilumDeployTool property.</summary>
			internal const string copytodrive = "copytodrive";
			
			/// <summary>The  ("gdbloadcommand") value for the LlilumDeployTool property.</summary>
			internal const string gdbloadcommand = "gdbloadcommand";
			
			/// <summary>The  ("nodeploy") value for the LlilumDeployTool property.</summary>
			internal const string nodeploy = "nodeploy";
			
			/// <summary>Prevents automatic generation of a default constructor.</summary>
			private LlilumDeployToolValues() {
			}
		}
	}
	
	internal partial class ProjectProperties {
		
		private static System.Func<System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>>, object, LlilumDebugger> CreateLlilumDebuggerPropertiesDelegate = new System.Func<System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>>, object, LlilumDebugger>(CreateLlilumDebuggerProperties);
		
		private static LlilumDebugger CreateLlilumDebuggerProperties(System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>> namedCatalogs, object state) {
			ProjectProperties that = ((ProjectProperties)(state));
			return new LlilumDebugger(that.ConfiguredProject, namedCatalogs.Result, "Project", that.File, that.ItemType, that.ItemName);
		}
		
		/// <summary>Gets the strongly-typed property accessor used to get and set Llilum Debugger options properties.</summary>
		internal System.Threading.Tasks.Task<LlilumDebugger> GetLlilumDebuggerPropertiesAsync() {
			System.Threading.Tasks.Task<System.Collections.Immutable.IImmutableDictionary<string, Microsoft.VisualStudio.ProjectSystem.Properties.IPropertyPagesCatalog>> namedCatalogsTask = this.GetNamedCatalogsAsync();
			return namedCatalogsTask.ContinueWith(CreateLlilumDebuggerPropertiesDelegate, this, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously, System.Threading.Tasks.TaskScheduler.Default);
		}
	}
}
